<!DOCTYPE html>
<!--[if lt IE 7 ]><html class="ie ie6" lang="en"> <![endif]-->
<!--[if IE 7 ]><html class="ie ie7" lang="en"> <![endif]-->
<!--[if IE 8 ]><html class="ie ie8" lang="en"> <![endif]-->
<!--[if (gte IE 9)|!(IE)]><!-->
<html lang="en">
<!--<![endif]-->
<head>
  <%= javascript_include_tag "application" %>
  <%= stylesheet_link_tag "application" %>
    <!-- Basic Page Needs
    ================================================== -->
    <meta charset="utf-8">
    <title>The Kickammender -- An Intelligent Recommendation Engine for Kickstarter</title>
    <meta name="description" content="Kickammender is an intelligent recommendation engine for potential Kickstarter backers.">
    <meta name="author" content="jnoconor and mpolycar">
    <!-- Mobile Specific Metas
    ================================================== -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <!-- CSS
    ================================================== -->
    <!-- Bootstrap  -->
    <%= stylesheet_link_tag "bootstrap.min" %>
    <!-- web font  -->
    <link href="http://fonts.googleapis.com/css?family=Open+Sans:300,400,600,800" rel="stylesheet" type="text/css">
    <!-- plugin css  -->
    <%= stylesheet_link_tag "js-plugin/animation-framework/animate" %>
    <%= stylesheet_link_tag "js-plugin/isotope/css/style" %>
    <%= stylesheet_link_tag "flexslider" %>

    <!-- icon fonts -->
    <%= stylesheet_link_tag "custom-icons" %>
    <%= stylesheet_link_tag "custom-icons-ie7" %>
    <!-- Custom css -->
    <%= stylesheet_link_tag "layout" %>
    <%= stylesheet_link_tag "green" %>
    <!--[if lt IE 9]><script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script> <![endif]-->
    <%= javascript_include_tag "modernizr-2.6.1.min" %>
    <!-- Favicons
    ================================================== -->
    <link rel="shortcut icon" href="assets/favicon.ico">
    <link rel="apple-touch-icon" href="assets/apple-touch-icon.png">
    <link rel="apple-touch-icon" sizes="72x72" href="assets/apple-touch-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="114x114" href="assets/apple-touch-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="144x144" href="assets/apple-touch-icon-144x144.png">
  </head>
<body data-spy="scroll" data-target="#scrollTarget" data-offset="150" id="fullScreen">

<!-- globalWrapper -->
<div id="globalWrapper" class="localscroll">
<!-- header -->
  <header id="displayHeader" class="navbar-fixed-top" role="banner">
    <div class="container">
      <nav class="navbar navbar-default scrollMenu" role="navigation">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse"> <span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button>
          <a class="navbar-brand" href="/">Kickammender.</a> 
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse" id="scrollTarget">
                        <!-- AddThis Button BEGIN -->
              <div class="addthis_toolbox addthis_default_style addthis_32x32_style pull-right" addthis:url="http://kickammender.com" style="display:inline-block">
              <ul class="socialNetwork">
              <li><a class="addthis_button_facebook tips" data-original-title="share this on Facebook"></a></li>
              <li><a class="addthis_button_twitter tips" data-original-title="share this on Twitter"></a></li>
              <li><a class="addthis_button_hackernews tips" data-original-title="share this on Hacker News"></a></li>
              <li><a class="addthis_button_reddit tips" data-original-title="share this on Reddit"></a></li>

              </div>
              <script type="text/javascript">var addthis_config = {"data_track_addressbar":false};</script>
              <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-529a94c531794907"></script>
              <!-- AddThis Button END -->
          <ul class="nav navbar-nav pull-right">
            <li><% if @user %><a href="/recommendations">Get More Recs</a> </li>
            <li><a href="/users/<%= @user.id %>#favorites">Your Favorites</a> </li>
            <li><a id="logout" href="/sessions/logout">Logout</a> <% end %></li>
            <li><a href="/about">How This Works</a> </li>
          </ul>
        </div>

      </nav>
    </div>
  </header>
<!-- header -->
<!-- empty div; need to have id 'paralaxSlice1' in the doc to make parallax work --> 



  <div id="paralaxSlice1" data-stellar-background-ratio="0.5"></div>
<!-- about us -->
        <section class="slice" id="about">
          <div class="container">
            <div class="row">
              <div class="col-xs-12">
                <h1>How this works</h1>
                <h2 class="subTitle">Kickammender uses machine learning to make intelligent recommendations</h2>
              </div>
            </div>

            <div class="row">
              <div class="col-sm-4"> <%= image_tag "plant_growing_from_coins.jpg", class: "img-responsive" %></div>
              <div class="col-sm-4">
                <h2>The Problem</h2>
                <p>How do you find Kickstarter projects? Most likely, if you've backed a project, you heard about it from a friend or a trusted online source. It's probably the only project you've backed, and it was probably one of the largest projects on the site. When your information about projects is limited to what bubbles up through some other channel, it can be difficult to find things you're interested in.</p>


                <p>We think Kickstarter is a great resource and a great idea, so we wanted to build something that would provide users with targeted suggestions for projects they might be interested in backing. We are also eagerly awaiting the birth of Skynet and have made our first contribution with this project.         
                </p>

              </div>

              <div class="col-sm-4">
                <h2>Our Solution</h2>
                <p></p>
                <p>Kickammender is a demonstration of a better way to find projects on Kickstarter. The heart of our process is the <em>k</em>-means clustering algorithm, which we've built into a dynamic web application using Ruby on Rails. We've also added a simple feedback system and user profile that allows users to tailor their recommendations, save projects they're interested in, and follow Kickstarter users that they like.</p>
                <p>Thanks for taking a look at Kickammender. We hope you find it useful or interesting. Read on for a detailed explanation of our methodology, or get in touch with us via Twitter: @jnoconor, @mpolycar. </p>
              </div>
            </div>
          </div>
        </section>
        <div id="formulaSlice" data-stellar-background-ratio="0.5">
          <div class="maskParent">
            <div class="paralaxMask"></div>
            <div class="paralaxText">
              <i class="icon-star iconBig"></i>

            </div>
          </div>
        </div>
        <section class="slice noPaddingBottom color4">
          <div class="container">
            <div class="row">
              <div class="col-xs-12">
                <h1>K Means Clustering</h1>
                <h2 class="subTitle">The inner workings of our recommendation engine</h2>
              </div>
            </div>

            <div class="row">
              <div class="col-sm-4">
                <h2>An Analogy</h2>
                <p>Imagine you are at the 50-yard line in a football stadium with 50,000 people. Each person in the stands has a few Kickstarter projects that they would recommend to you. You're not sure where to start, and from the center of the stadium, you can't make out very many details. You could look up at the jumbotron, where they are playing interviews with a few people talking about the projects they like, but you'll still miss out on the other 99%. You could also go into the stands and start hunting on your own, but unless you are lucky, this will be very slow going and still isn't much better than picking someone at random.</p>
                <p>With <em>k</em>-means clustering, we transform the noisy football stadium in an orderly skyscraper. Each floor of the skyscraper represents a cohesive group that contains the people who are most similar to each other. In the lobby of the building, a robot receptionist can analyze your interests and tell you which floor fits you best. So now, instead of talking to a disorganized sample from the group of 50,000, you can talk to people who are most similar to you and find out what projects they recommend. This is essentially how our system works.</p>


             </div>
              <div class="col-sm-4">
                <h2>Technical Concepts</h2>
                <%= image_tag "kmeans2.gif", class: "kmeans-gif", style: "width: 100%" %>
                <p>This diagram illustrates the process in two dimensions. We have a selection of points on a grid, and we want to divide it into four clusters. Four starting points (seen above highlighted in green) are selected. These are the initial centers of each cluster. For every other data point, we calculate the distance to each of the centers and assign that point to the center that is closest to it. Once all the points have been assigned to a center, the centers are recalculated. Each center will move to the center of the points that are assigned to it. This is one iteration. The process then repeats, where each point will be reassigned to the center that is closest and the centers will be moved, until a specified number of iterations have taken place or the centers converge to a stable point.</p>

              </div>

              <div class="col-sm-4">
                <h2>Ruby Implementation</h2>

                <pre class="prettyprint code-scrollable-block">
def cluster(k,points,max_iters)
  seeds = kmplusplus(k,points)
  self.assignments = {}
  seeds.each do |seed|
    self.assignments[seed] = []
  end
  points.each do |point|
    closest_seed = seeds.min_by do |seed|
      distance(seed, point)
    end
    self.assignments[closest_seed] << point
  end
  self.centers = assignments.keys
  iter = 0
  begin 
    old_centers = self.centers.dup
    self.centers = calculate_new_centers(k)
    self.centers != old_centers ? changed = true : changed = false
    reassign_groups(centers)
    iter += 1
  end  while iter <= max_iters && changed
  self.assignments
end # end of cluster method 
                 </pre>
                <p>The process can be easily scaled to an arbitrary number of dimensions and an arbitrary number of groups. In our case, we have 13 dimensions along which we classify users and about 65 distinct groups. </p>
                <p>We had some trouble with the quality of our output when using random starting points, so we instead opted to create an intelligent method to select starting points for the algorithm, so our final process is closer to a <em>k</em>-means++ implementation (<%=link_to "reference", "http://en.wikipedia.org/wiki/K-means++"%>).
              </div>
            </div>
          </div>
        </div>
      </section>

        <section class="slice">
          <div class="container">
            <div class="row">
              <div class="col-xs-12">
                <h1>Our Domain Model</h1>
                <h2 class="subTitle">What we built</h2>
              </div>
            </div>

            <div class="row">
              <div class="col-sm-12">
                <center><%= image_tag "user_score_diagram.jpg" %></center>

              </div>
            </div>
            <div class="row">

              <div class="col-sm-6">
                <h2>How we classify Kickstarter users</h2>
                <p>We collected data on tens of thousands of Kickstarter users and Kickstarter projects. With all of the associations, we have a database of more than one million records. We take this data and convert it to scores for each user, and then feed those scores into recommendation engine. </p>

                <p>The scores are based on the project categories on Kickstarter. Each project on Kickstarter belongs to one of 13 main categories. For each user, we count how many times they have backed a project in each category. Then we normalize the counts into scores and develop a profile on 13-dimensions, with a score for each category. This effectively approximates their interests and gives us an idea of what kind of projects they're likely to back. Now we have a point for each user, and we can cluster similar points together with <em>k</em>-means algorithm.</p>

                <p>In our most recent clustering, we evaluated 9923 users who had each backed more than 4 projects and divided them into 65 clusters. The largest cluster had 932 users, with an average of ~23 recent projects backed, while the smallest had only 4, with an average of more than 30 recent projects backed.
                </p>

              </div>

              <div class="col-sm-6">
                <h2>How we classify users of our site</h2>
                <p>For users of our site, instead of measuring their interest in each Kickstarter category, we have them sign in with Facebook. From the Facebook Graph API, we grab their likes. Each like on Facebook falls into one of roughly 150 categories, which we translated into their most closely related Kickstarter categories. In this way we can develop a 13-dimensional profile for a user that can be easily compared against the Kickstarter backers in our database.</p>

                <p>We assign them to the center that is closest by Euclidean distance, just as all of the other points in the dataset.
                <pre class="prettyprint code-scrollable-block">
centers.each do |center|
  distances[center] = Kmeans.distance(center.scores, self.scores)
end
self.center = distances.sort_by {|center, distance| distance}.first[0]</pre>
                  The cluster with that center is now the cluster the user belongs to. In this cluster are all of the Kickstarter backers who are most similar to the user, and it is the projects these backers have supported that we draw from to generate our recommendations.
              </div>
            </div>
          </div>
        </section>
        <div id="wordCloudSlice" data-stellar-background-ratio="0.5">
          <div class="maskParent">
            <div class="paralaxMask"></div>
            <div class="paralaxText">
              <%= image_tag "facebook-like-click.jpg", size: "150x150", style: "border-radius: 15px" %>
            </div>
          </div>
        </div>
        <section class="slice noPaddingBottom color4">
          <div class="container">
            <div class="row">
              <div class="col-xs-12">
                <h1>The end result</h1>
                <h2 class="subTitle">How we generate recommendations</h2>
              </div>
            </div>

            <div class="row">



              <div class="col-sm-4">
                <h2>Finding the active projects</h2>
                <p>Pulling out recommendations from here is pretty simple. First we look at all of the projects that users in the cluster have backed, and filter them to include only the ones that are still active (the ones you can still donate to). Then we count how many people in the cluster have backed each project and then rank them. This way we get a sense of which projects are representative of the cluster, and the most popular.
<pre class="pre-scrollable prettyprint code-scrollable-block">@ranked_active_projects = Hash.new(0)
ks_users_in_cluster.each do |user|
  actives = user.ks_projects.where(:active => true)
  actives.each do |project|
    @ranked_active_projects[project] += 1
  end
end
</pre>      
                These are our first recommendations the the user. Better projects are going to tend to have more backers so we make an assumption that these might be slightly more appealing on average. </p> 
             </div>

             <div id="outer right" class="col-md-8">
                <div class="row">
                    <div class="col-sm-6">

                      <h2>Recommendations</h2>
                      <p>We pull out the top two and offer them to the user. We also add a random pick, which may be any active project in the database. This is in part to allow the user to escape their cluster if they've been classified poorly, and in part to let them keep looking for projects even after they have seen all of the active projects in their cluster. There is some randomness in the algorithm, so in some cases a user may be in a very small cluster with a very small number of active projects. A random pick provides some mitigation.</p>

                    </div>
                    <div class="col-sm-6 pull-right">
                      <h2>A similar user</h2>
                     <p> In addition to our recommendations, we identify the person in their cluster who we have gauged to be most similar to them, again by Euclidean distance.</p>

                <p><pre class="prettyprint code-scrollable-block">
@most_similar = ks_users_in_cluster.min_by do |user|
  Kmeans.distance(@user.scores, user.scores)
end
</pre></p>
            </div> <!-- end 2/3 row -->
            <div class="row">
                      <div class="col-md-11 pull-right" style="padding-top:30px">
                      <%= image_tag "user_recommendations_diagrams.jpg", width: "100%", style: "border-radius: 25px" %>
                      <p> </p> 
                      </div>
                    </div>
                    </div>
                  </div>
                </div>
          </div>
        </section>
        <section class="slice">
          <div class="container">
            <div class="row">
              <div class="col-xs-12">
                <h1>Getting Feedback from Users</h1>
                <h2 class="subTitle">Having the user train our engine to suit their tastes</h2>
              </div>
            </div>

            <div class="row">
              <div class="col-sm-6">
                <h2>Limitations</h2>
                <p>We picked Facebook likes to classify a user mostly because it is convenient &mdash; there is minimal effort required for the user. You sign in with a single click and the rest is automatic. You don't have to fill out a survey or even enter search terms. The results are presented to you as painlessly as possible. So far, we've found Facebook likes to be a reasonable approximation to classify users, but there are better ways and we recognize the limitations of this method. So to help strike a better balance between accuracy and convenience, we wanted to include a system that takes user feedback to improves our recommendations. 

                <p>We've allowed users rate to their recommendations with a thumbs up or a thumbs down. We record this rating in our database and dynamically adjust their score with each click. The next time they ask for recommendations, their scores may be different enough that they are assigned to a new cluster. If not, they will still receive a new set of recommendations from the same cluster, as projects that a user has already rated are excluded. This new cluster will hopefully have a selection of projects that are more appealing to the user.</p>
                <center>
                </center>
              </div>

              <div class="col-sm-6">
                <h2>The user's profile</h2>
              <p>Since we are recording both positive and negative feedback, we built an interface for users to take a look through the projects they have liked. This means that they can browse through some recommendations, rate them up or down, and then come back later to see what they've liked. If you're looking for a Kickstarter project to back, this can really help a lot. 
              </p>
              <p>We also allow our users to "follow" the Kickstarter users from our database that we identify as most similar to them. We thought that maybe if you find someone who has backed a lot of projects that you find interesting, you could keep track of them and know when they've backed something new. The feature as currently implemented is mostly a demonstration rather than a functional tool. </p>
                <p style="padding-top:50px"><center><i class="icon-star iconBig"></i></center></p>
              </div>

              <div class="col-sm-6 pull-right">
                <h2>About Us</h2>
                <p>We're students at the <%= link_to "Flatiron School", "http://www.flatironschool.com"%> in New York City.
                We had a lot of fun building this. Let us know what you think.</p><p class="pull-right"><%= link_to "Joe", "http://www.twitter.com/jnoconor"%> and <%= link_to "Michael", "http://www.twitter.com/mpolycar" %></p>
                </div>
              </div>
            </div>
          </div>
        </section>
      </div>

<script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js?lang=ruby&skin=desert"></script>
<meta name="viewport" content="user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=320, height=device-height, target-densitydpi=medium-dpi" />

<div id="paralaxSlice1" data-stellar-background-ratio="0.5">
    <div class="maskParent">
      <div class="paralaxMask"></div>
      <div class="paralaxText container">
        <h1><i class="icon-star"></i></h1>
      </div>
    </div>
  </div>

<!-- ========== footer ============= -->
<footer class="color4">
  <section id="mainFooter">
    <div class="container" id="footer">
      <div class="row">
        <div class="col-xs-4 pull-left">
          <div class="footerWidget pull-left">

            <h3>  Made with <%= image_tag "brain-xxl.png", size: "20x20"%> by <a href="http://www.twitter.com/jnoconor">@jnoconor</a> and <a href="http://www.twitter.com/mpolycar">@mpolycar</a> in NYC.</h3>
            <h3 class="tips" data-original-title="If you're from Kickstarter, we're sorry we've been scraping your site, though we bet your servers enjoyed the exercise. :-)">Not affiliated with Kickstarter in any way, just fans.</h3>
          </div>
        </div>
        <div class="col-xs-4" align="center">
            <h3>Curious about how this works?</h3>
            <a class="btn" href="/about">Find out</a>
        </div>

        <div class="col-xs-4 pull-right">
          <div class="footerWidget">

            <h3>Think it's cool?</h3>
            <!-- AddThis Button BEGIN -->
              <div class="addthis_toolbox addthis_default_style addthis_32x32_style" addthis:url="http://kickammender.com">
              <ul class="socialNetwork">
              <li><a class="addthis_button_facebook tips" data-original-title="share this on Facebook"></a></li>
              <li><a class="addthis_button_twitter tips" data-original-title="share this on Twitter"></a></li>
              <li><a class="addthis_button_hackernews tips" data-original-title="share this on Hacker News"></a></li>
              <li><a class="addthis_button_reddit tips" data-original-title="share this on Reddit"></a></li>

              </div>
              <script type="text/javascript">var addthis_config = {"data_track_addressbar":false};</script>
              <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-529a94c531794907"></script>
              <!-- AddThis Button END -->         
          </div>
        </div>




      </div>
    </div>
  </section>
</footer>

<!-- End footer -->

<!-- ========= javascripts ============= -->
    <%= javascript_include_tag "js-plugin/respond/respond.min" %>
    <%= javascript_include_tag "js-plugin/jquery/1.8.3/jquery.min" %>
    <%= javascript_include_tag "js-plugin/jquery-ui/jquery-ui-1.8.23.custom.min" %>

    <!-- third party plugins  -->
    <%= javascript_include_tag "bootstrap.min" %>
    <%= javascript_include_tag "jquery.flexslider-min" %>
    <%= javascript_include_tag "js-plugin/isotope/jquery.isotope.min" %>
    <%= javascript_include_tag "js-plugin/parallax/js/jquery.scrollTo-1.4.3.1-min" %>
    <%= javascript_include_tag "js-plugin/parallax/js/jquery.localscroll-1.2.7-min" %>
    <%= javascript_include_tag "js-plugin/parallax/js/jquery.stellar.min" %>

    <!-- <script type="text/javascript" src="assets/js-plugin/smoothscroll/SmoothScroll.js"></script> -->

    <!-- Custom  -->
    <%= javascript_include_tag "custom" %>

  </body>
</html>
