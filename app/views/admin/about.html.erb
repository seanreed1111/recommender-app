<meta name="viewport" content="user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=320, height=device-height, target-densitydpi=medium-dpi" />
  <header id="displayHeader" class="navbar-fixed-top" role="banner">
    <div class="container">
      <nav class="navbar navbar-default scrollMenu" role="navigation">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-ex1-collapse"> <span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button>
          <a class="navbar-brand" href="#homeFullScreen">Kickammender.</a> 
        </div>
        <div class="collapse navbar-collapse navbar-ex1-collapse" id="scrollTarget">
          <ul class="nav navbar-nav pull-right">
            <li class="active"><a href="/">Home</a> </li>
            <li><a href="/recommendations">Your Recs</a> </li>
            <li><%= link_to "Your Profile", user_path(@user) %> </li>
            <li><a id="logout" href="/sessions/logout">Logout</a> </li>
            <li><a href="/about#about">How This Works</a> </li>
          </ul>
        </div>

      </nav>
    </div>
  </header>
<p id="notice"><%= notice %></p>
  <div id="paralaxSlice1" data-stellar-background-ratio="0.5"></div>
<!-- about us -->
        <section class="slice" id="about">
          <div class="container">
            <div class="row">
              <div class="col-xs-12">
                <h1>How this works</h1>
                <h2 class="subTitle">Kickammender uses machine learning to make intelligent recommendations</h2>
              </div>
            </div>

            <div class="row">
              <div class="col-sm-4"> <%= image_tag "plant_growing_from_coins.jpg", class: "img-responsive" %></div>
              <div class="col-sm-4">
                <h2>The Problem</h2>
                <p>How do you find Kickstarter projects? Most likely, if you've backed a project, you heard about it from a friend or a trusted online source. It's probably the only project you've backed, and it was probably one of the largest projects on the site. When your information about projects is limited to what bubbles up through some other channel, it can be difficult to find things you're interested in.</p>


                <p>We think Kickstarter is a great resource and a great idea, so we wanted to build something that would provide users with targeted suggestions for projects they might be interested in backing.        
                </p>

              </div>

              <div class="col-sm-4">
                <h2>Our Solution</h2>
                <p></p>
                <p>Kickammender is a demonstration of a better way to find projects on Kickstarter. The heart of our process is the <em>k</em>-means clustering algorithm, which we've built into a dynamic web application using Ruby on Rails. We've also added a simple feedback system and user profile that allows users to tailor their recommendations, save projects they're interested in, and follow Kickstarter users that they like.</p>
                <p>Thanks for taking a look at Kickammender. We hope you find it useful or interesting. Read on for a detailed explanation of our methodology, or get in touch with us via Twitter: @jnoconor, @mpolycar. </p>
              </div>
            </div>
          </div>
        </section>
        <div id="formulaSlice" data-stellar-background-ratio="0.5">
          <div class="maskParent">
            <div class="paralaxMask"></div>
            <div class="paralaxText">
              <i class="icon-star iconBig"></i>

            </div>
          </div>
        </div>
        <section class="slice noPaddingBottom color4">
          <div class="container">
            <div class="row">
              <div class="col-xs-12">
                <h1>K Means Clustering</h1>
                <h2 class="subTitle">The inner workings of our recommendation engine</h2>
              </div>
            </div>

            <div class="row">
              <div class="col-sm-4">
                <h2>An Analogy</h2>
                <p>Imagine you are at the 50-yard line in a football stadium with 50,000 people. Each person in the stands has a few Kickstarter projects that they would recommend to you. You're not sure where to start, and from the center of the stadium, you can't make out very many details. You could look up at the jumbotron, where they are playing interviews with a few people talking about the projects they like, but you'll still miss out on the other 99%. You could also go into the stands and start hunting on your own, but unless you are lucky, this will be very slow going and still isn't much better than picking someone at random.</p>
                <p>With <em>k</em>-means clustering, we transform the noisy football stadium in an orderly skyscraper. Each floor of the skyscraper represents a cohesive group that contains the people who are most similar to each other. In the lobby of the building, a robot receptionist can analyze your interests and tell you which floor fits you best. So now, instead of talking to a disorganized sample from the group of 50,000, you can talk to people who are most similar to you and find out what projects they recommend. This is essentially how our system works.</p>


             </div>
              <div class="col-sm-4">
                <h2>Technical Concepts</h2>
                <%= image_tag "kmeans2.gif", class: "kmeans-gif", style: "width: 100%" %>
                <p>This diagram illustrates the process in two dimensions. We have a selection of points on a grid, and we want to divide it into four clusters. Four starting points (seen above highlighted in green) are selected. These are the initial centers of each cluster. For every other data point, we calculate the distance to each of the centers and assign that point to the center that is closest to it. Once all the points have been assigned to a center, the centers are recalculated. Each center will move to the center of the points that are assigned to it. This is one iteration. The process then repeats, where each point will be reassigned to the center that is closest and the centers will be moved, until a specified number of iterations have taken place or the centers converge to a stable point.</p>

              </div>

              <div class="col-sm-4">
                <h2>Ruby Implementation</h2>
                [add modal zoom]
                <p><%= image_tag "cluster_method.jpg", width: "100%", style: "border-radius:10px;" %></p>
                <p>The process can be easily scaled to an arbitrary number of dimensions and an arbitrary number of groups. In our case, we have 13 dimensions along which we classify users and about 65 distinct groups. </p>

              </div>
            </div>
          </div>
        </div>


        <section class="slice">
          <div class="container">
            <div class="row">
              <div class="col-xs-12">
                <h1>Our Domain Model</h1>
                <h2 class="subTitle">[this cries out for a diagram] What we built</h2>
              </div>
            </div>

            <div class="row">
              <div class="col-sm-4">

                <h2>How we classify Kickstarter users</h2>
                <p>We collected data on tens of thousands of Kickstarter users and Kickstarter projects. Projects on Kickstarter are divided into 13 main categories, so for each each user, we generated a 13-dimensional profile that approximates their interest in each of the main categories based on which projects they've backed. Then we used the <em>k</em>-means algorithm to generate 65 clusters of similar users. 

                <p>[statistical-type chart?]
                  In our most recent clustering, we evaluated 9923 users who had backed more than 4 projects. The largest cluster had 932 users, with an average of ~23 recent projects backed, while the smallest had only 4, with an average of more than 30 recent projects backed.
                </p>
              </div>

              <div class="col-sm-4">
                <h2>[sweet diagram]</h2>
                <p>ks_user
                  projects they've backed
                  scores
                  center
                  info
                </p>
                <p>
                  center
                  scores
                  ks_users
                </p>
              </div>

              <div class="col-sm-4">
                <h2>How we classify users of our site</h2>
                <p>Users of Kickammender sign in with Facebook. From the Facebook Graph API, we grab the user's likes. Each like on Facebook falls into one of roughly 150 categories. Just like we did for each Kickstarter user, we generate a 13-dimensional profile for our user, this time mapping the categories of their Facebook likes to project categories on Kickstarter.</p> 
                <p>They are then assigned to the center that is closest to them by Euclidean distance, just as all of the other points in the dataset. The cluster with that center is now the user's cluster. In this cluster are all of the Kickstarter users that are most similar to the user of our site, and it is the projects that these users have backed that we use to generate our recommendations.
              </div>
            </div>
          </div>
        </section>
        <div id="wordCloudSlice" data-stellar-background-ratio="0.5">
          <div class="maskParent">
            <div class="paralaxMask"></div>
            <div class="paralaxText">
              <%= image_tag "facebook-like-click.jpg", size: "150x150", style: "border-radius: 15px" %>
            </div>
          </div>
        </div>
        <section class="slice noPaddingBottom color4">
          <div class="container">
            <div class="row">
              <div class="col-xs-12">
                <h1>The end result</h1>
                <h2 class="subTitle">How we generate recommendations</h2>
              </div>
            </div>

            <div class="row">
              <div class="col-sm-4">
                <h2>Finding the active projects</h2>
                <p>Pulling out recommendations from here is pretty simple. First we look at all of the projects that users in the cluster have backed, and filter them to include only the ones that are still active (the ones you can still donate to). Then we count how many people in the cluster have backed each project and then rank them. This way we get a sense of which projects are representative of the cluster, and the most popular.
<pre class="pre-scrollable prettyprint">@ranked_active_projects = Hash.new(0)
ks_users_in_cluster.each do |user|
  actives = user.ks_projects.where(:active => true)
  actives.each do |project|
    @ranked_active_projects[project] += 1
  end
end
</pre>      
                These are our first recommendations the the user. Better projects are going to tend to have more backers so we make an assumption that these might be slightly more appealing on average. </p> 
             </div>
              <div class="col-sm-4">

                <h2>Recommendations</h2>
                <p>We pull out the top two and offer them to the user. We also add a random pick, which may come from. This is in part to allow the to escape their cluster if they've been classified poorly, and also to let them keep looking for projects even after they have seen all of the active projects in their cluster. There is some randomness in the algorithm, so in some cases a user may be in a very small cluster with a very small number of active projects. </p>

              </div>

              <div class="col-sm-4">
                <h2>A similar user</h2>
In addition to our recommendations, we identify the person in their cluster who we have gauged to be most similar to them, again by Euclidean distance.

                <p><pre class="prettyprint">
@most_similar = ks_users_in_cluster.min_by do |user|
  Kmeans.distance(@user.scores, user.scores)
end
</pre></p>
                <div class="col-sm-8">
                <h2>[a diagram that spans two columns]</h2>
                <p> </p> 
                </div>

                <br>
                <center>
              </center>
              </div>
            </div>
          </div>
        </section>
        <section class="slice">
          <div class="container">
            <div class="row">
              <div class="col-xs-12">
                <h1>Getting Feedback from Users</h1>
                <h2 class="subTitle">Having the user train our engine to suit their tastes</h2>
              </div>
            </div>

            <div class="row">
              <div class="col-sm-4">
                <h2>Limitations</h2>
                <p>We picked Facebook likes to classify a user mostly because it is convenient &mdash; you just have to sign in with a single click and the rest is taken care of. So far, Facebook likes have proven to be a reasonable approximation, but there are better ways and we recognize the limitations of this method. So we wanted to build a system that allowed us to improve our recommendations with user feedback. 

                <p>We've allowed users rate their recommendations wtih a thumbs up or a thumbs down. We record this feedback in our database and dynamically adjust their score with each click. The next time they ask for recommendations, their scores may be different enough that they are assigned to a new cluster. If not, they will still receive a new set of recommendations from the same cluster, as projects that a user has already rated are excluded. This new cluster will hopefully have a selection of projects that are more appealing to the user.</p>
                <center>
                </center>
              </div>

              <div class="col-sm-4">
                <h2>The user's profile</h2>
              <p>Since we are recording both positive and negative feedback, we built an interface for users to take a look through the projects they have liked. This means that they can browse through some recommendations, rate them up or down, and then come back later to see what they've liked. If you're looking for a Kickstarter project to back, this can really help a lot. 
              </p>
              <p>Since we also provide a Kickstarter user who we calculated to be most similar, we allow our users to follow them. We thought that maybe if you find someone who has backed a lot of projects that you find interesting, you could keep track of them and know when they've backed something new. The feature as currently implemented is mostly a demonstration rather than a functional tool. </p>
              </div>

              <div class="col-sm-4">
                <h2>Classifying by Facebook Likes</h2>
                <p>What happens when we have a new user that hasnt backed any kickstarter projects? We look at his facebook likes and map the facebook likes categories to the kickstarter categories. Say Albert hasn't backed any kickstarter projects but he has liked 6 Artists pages on facebook, 3 theaters, 2 comic books, 2 design pages and 1 movie then he would be given the same score as Alex.</p>
                <p>We had a lot of fun building this. Let us know what you think.</p><p class="pull-right"><%= link_to "Joe", "http://www.twitter.com/jnoconor"%> and <%= link_to "Michael", "http://www.twitter.com/mpolycar" %></p>
                </div>
                <div class="col-sm-4 pull-right"> 
                <i class="icon-star iconBig pull-right"></i>
              </div>
            </div>
          </div>
        </section>
      </div>

